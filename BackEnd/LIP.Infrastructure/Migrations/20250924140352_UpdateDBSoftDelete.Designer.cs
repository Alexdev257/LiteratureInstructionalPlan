// <auto-generated />
using System;
using LIP.Infrastructure.Persistency;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LIP.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924140352_UpdateDBSoftDelete")]
    partial class UpdateDBSoftDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Examquestion", b =>
                {
                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ExamId", "QuestionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "QuestionId" }, "QuestionId");

                    b.ToTable("examquestions", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Answerguide", b =>
                {
                    b.Property<int>("AnswerGuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnswerGuideId"));

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KeyPoints")
                        .HasColumnType("text");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int");

                    b.HasKey("AnswerGuideId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExamId" }, "ExamId");

                    b.ToTable("answerguides", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Bookseries", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("SeriesId")
                        .HasName("PRIMARY");

                    b.ToTable("bookseries", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8mb3");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8mb3");

                    b.HasKey("ExamId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy");

                    b.HasIndex(new[] { "ExamTypeId" }, "ExamTypeId");

                    b.HasIndex(new[] { "GradeLevelId" }, "GradeLevelId");

                    b.HasIndex(new[] { "SeriesId" }, "SeriesId");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examanswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerContent")
                        .HasColumnType("text");

                    b.Property<int?>("AttemptId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AttemptId" }, "AttemptId");

                    b.HasIndex(new[] { "QuestionId" }, "QuestionId")
                        .HasDatabaseName("QuestionId1");

                    b.ToTable("examanswers", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examattempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastSavedAt")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Score")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExamId" }, "ExamId")
                        .HasDatabaseName("ExamId1");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("examattempts", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examtype", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ExamTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("ExamTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("examtypes", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Gradelevel", b =>
                {
                    b.Property<int>("GradeLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GradeLevelId"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("GradeLevelId")
                        .HasName("PRIMARY");

                    b.ToTable("gradelevels", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Practicequestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("QuestionType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy")
                        .HasDatabaseName("CreatedBy1");

                    b.HasIndex(new[] { "GradeLevelId" }, "GradeLevelId")
                        .HasDatabaseName("GradeLevelId1");

                    b.HasIndex(new[] { "SeriesId" }, "SeriesId")
                        .HasDatabaseName("SeriesId1");

                    b.ToTable("practicequestions", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Submission", b =>
                {
                    b.Property<int>("SubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SubmissionId"));

                    b.Property<string>("AiFeedback")
                        .HasColumnType("text");

                    b.Property<float?>("AutoScore")
                        .HasColumnType("float");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime");

                    b.HasKey("SubmissionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExamId" }, "ExamId")
                        .HasDatabaseName("ExamId2");

                    b.HasIndex(new[] { "StudentId" }, "StudentId");

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TemplateId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FilePath"), "utf8mb3");

                    b.Property<int?>("GradeLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8mb3");

                    b.HasKey("TemplateId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CreatedBy" }, "CreatedBy")
                        .HasDatabaseName("CreatedBy2");

                    b.HasIndex(new[] { "GradeLevelId" }, "GradeLevelId")
                        .HasDatabaseName("GradeLevelId2");

                    b.HasIndex(new[] { "SeriesId" }, "SeriesId")
                        .HasDatabaseName("SeriesId2");

                    b.ToTable("templates", (string)null);
                });

            modelBuilder.Entity("LIP.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8mb3");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullName"), "utf8mb3");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Password"), "utf8mb3");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UserName"), "utf8mb3");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Examquestion", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Exam", null)
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("examquestions_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.Practicequestion", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("examquestions_ibfk_2");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Answerguide", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Exam", "Exam")
                        .WithMany("Answerguides")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("answerguides_ibfk_1");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Exam", b =>
                {
                    b.HasOne("LIP.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("Exams")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("exams_ibfk_4");

                    b.HasOne("LIP.Domain.Entities.Examtype", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .HasConstraintName("exams_ibfk_3");

                    b.HasOne("LIP.Domain.Entities.Gradelevel", "GradeLevel")
                        .WithMany("Exams")
                        .HasForeignKey("GradeLevelId")
                        .HasConstraintName("exams_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.Bookseries", "Series")
                        .WithMany("Exams")
                        .HasForeignKey("SeriesId")
                        .HasConstraintName("exams_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ExamType");

                    b.Navigation("GradeLevel");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examanswer", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Examattempt", "Attempt")
                        .WithMany("Examanswers")
                        .HasForeignKey("AttemptId")
                        .HasConstraintName("examanswers_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.Practicequestion", "Question")
                        .WithMany("Examanswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("examanswers_ibfk_2");

                    b.Navigation("Attempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examattempt", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Exam", "Exam")
                        .WithMany("Examattempts")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("examattempts_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.User", "User")
                        .WithMany("Examattempts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("examattempts_ibfk_2");

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Practicequestion", b =>
                {
                    b.HasOne("LIP.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("Practicequestions")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("practicequestions_ibfk_3");

                    b.HasOne("LIP.Domain.Entities.Gradelevel", "GradeLevel")
                        .WithMany("Practicequestions")
                        .HasForeignKey("GradeLevelId")
                        .HasConstraintName("practicequestions_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.Bookseries", "Series")
                        .WithMany("Practicequestions")
                        .HasForeignKey("SeriesId")
                        .HasConstraintName("practicequestions_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("GradeLevel");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Submission", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("submissions_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("submissions_ibfk_2");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Template", b =>
                {
                    b.HasOne("LIP.Domain.Entities.User", "CreatedByNavigation")
                        .WithMany("Templates")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("templates_ibfk_3");

                    b.HasOne("LIP.Domain.Entities.Gradelevel", "GradeLevel")
                        .WithMany("Templates")
                        .HasForeignKey("GradeLevelId")
                        .HasConstraintName("templates_ibfk_1");

                    b.HasOne("LIP.Domain.Entities.Bookseries", "Series")
                        .WithMany("Templates")
                        .HasForeignKey("SeriesId")
                        .HasConstraintName("templates_ibfk_2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("GradeLevel");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("LIP.Domain.Entities.User", b =>
                {
                    b.HasOne("LIP.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Bookseries", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Practicequestions");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Exam", b =>
                {
                    b.Navigation("Answerguides");

                    b.Navigation("Examattempts");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examattempt", b =>
                {
                    b.Navigation("Examanswers");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Examtype", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Gradelevel", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Practicequestions");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Practicequestion", b =>
                {
                    b.Navigation("Examanswers");
                });

            modelBuilder.Entity("LIP.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LIP.Domain.Entities.User", b =>
                {
                    b.Navigation("Examattempts");

                    b.Navigation("Exams");

                    b.Navigation("Practicequestions");

                    b.Navigation("Submissions");

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
